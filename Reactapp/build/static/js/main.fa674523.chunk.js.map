{"version":3,"sources":["components/Stopwatch/Stopwatch.jsx","App.js","reportWebVitals.js","index.js"],"names":["Stopwatch","_useState","useState","_useState2","_slicedToArray","disable","setDisable","_useState3","_useState4","visible","setVisible","removeVisible","prev","_useState5","_useState6","time","setTime","_useState7","_useState8","isRunning","setIsRunning","useEffect","interval","setInterval","clearInterval","_jsxs","className","children","_jsx","align","hours","Math","floor","minutes","seconds","concat","toString","padStart","formattedTime","onClick","disabled","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"0OA+FeA,EA5FG,WAEhB,IAAAC,EAA8BC,oBAAS,GAAKC,EAAAC,YAAAH,EAAA,GAArCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,EAA8BL,oBAAS,GAAKM,EAAAJ,YAAAG,EAAA,GAArCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GACpBG,EAAgB,WACpBD,GAAW,SAACE,GAAI,OAAIA,CAAI,GAC1B,EAKAC,EAAwBX,mBAAS,GAAEY,EAAAV,YAAAS,EAAA,GAA5BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAEpBG,EAAkCf,oBAAS,GAAMgB,EAAAd,YAAAa,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAE9BG,qBAAU,WACR,IAAIC,EAAW,KAQf,OAPIH,EACFG,EAAWC,aAAY,WACrBP,GAAQ,SAACD,GAAI,OAAKA,EAAO,CAAC,GAC5B,GAAG,KACOI,GAAsB,IAATJ,GACvBS,cAAcF,GAET,kBAAME,cAAcF,EAAU,CACvC,GAAG,CAACH,EAAWJ,IA+Bf,OACEU,eAAA,OAAKC,UAAY,kBAAiBC,SAAA,CAEhCC,cAAA,MAAIC,MAAM,SAAQF,SAAC,oBAEnBC,cAAA,KAAG,cAAY,OAAOF,UAAU,WAAUC,SAdxB,WACpB,IAAMG,EAAQC,KAAKC,MAAMjB,EAAO,MAC1BkB,EAAUF,KAAKC,MAAOjB,EAAO,KAAQ,IACrCmB,EAAUnB,EAAO,GACvB,MAAM,GAANoB,OAAUL,EAAMM,WAAWC,SAAS,EAAG,KAAI,KAAAF,OAAIF,EAC5CG,WACAC,SAAS,EAAG,KAAI,KAAAF,OAAID,EAAQE,WAAWC,SAAS,EAAG,KACxD,CAOgDC,KAC5Cb,eAAA,OAAKC,UAAY,aAAYC,SAAA,CAE1BlB,GACGmB,cAAA,UAAQ,cAAY,QAAQW,QAtClB,WAnBlBjC,GAAW,GAqBXK,IACAS,GAAa,EACf,EAkC2DO,SAAC,UAKvDR,GACCS,cAAA,UAAQ,cAAY,QAAQW,QAtCd,WAClBnB,GAAa,EACf,EAoCuDO,SAAC,WAKlDR,GAAsB,IAATJ,GACba,cAAA,UAAQ,cAAY,SAASW,QAxCd,WACnBnB,GAAa,EACf,EAsCyDO,SAAC,WAKpDC,cAAA,UAAQ,cAAY,QAAQW,QAzCd,WAClBvB,EAAQ,GACRL,IACAS,GAAa,EACf,EAqCwDoB,SAAUnC,EAAQsB,SAAC,eAQ7E,E,MChFec,MAVf,WACE,OACEb,cAAA,OAAKF,UAAW,YAAWC,SAC3BC,cAAA,OAAKF,UAAU,MAAKC,SAClBC,cAAC5B,EAAS,OAIhB,ECCe0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,SAAAC,GAAkD,IAA/CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EACV,GAEJ,ECJAS,IAASC,OACPzB,cAAC0B,IAAMC,WAAU,CAAA5B,SACfC,cAACa,EAAG,MAENe,SAASC,eAAe,SAM1Bf,G","file":"static/js/main.fa674523.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './Stopwatch.css';\n\nconst Stopwatch = () => {\n  // state to track the elapsed time\n  const [disable, setDisable] = useState(true);\n  const [visible, setVisible] = useState(true);\n  const removeVisible = ()=>{\n    setVisible((prev)=>!prev);\n  }\n  const removeDisable= ()=>{\n    setDisable(false);\n  }\n\n  const [time, setTime] = useState(0);\n  // state to track whether the stopwatch is running\n  const [isRunning, setIsRunning] = useState(false);\n\n  useEffect(() => {\n    let interval = null;\n    if (isRunning) {\n      interval = setInterval(() => {\n        setTime((time) => time + 1);\n      }, 1000);\n    } else if (!isRunning && time !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isRunning, time]);\n\n  const handleStart = () => {\n    removeDisable();\n    removeVisible();\n    setIsRunning(true);\n  };\n\n  const handlePause = () => {\n    setIsRunning(false);\n  };\n\n  const handleResume = () => {\n    setIsRunning(true);\n  };\n\n  const handleReset = () => {\n    setTime(0);\n    removeVisible();\n    setIsRunning(false);\n  };\n\n  const formattedTime = () => {\n    const hours = Math.floor(time / 3600);\n    const minutes = Math.floor((time % 3600) / 60);\n    const seconds = time % 60;\n    return `${hours.toString().padStart(2, \"0\")}:${minutes\n      .toString()\n      .padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`;\n  };\n\n  return (\n    <div className = \"watch_container\">\n    \n      <h1 align=\"center\">React Stopwatch</h1>\n      {/* display the elapsed time */}\n      <p data-testid=\"time\" className=\"timefont\">{formattedTime()}</p>\n      <div className = \"button_con\">\n      {/* start button */}\n        {visible &&(\n            <button data-testid=\"start\" onClick={handleStart}>\n              Start\n            </button>\n        )}\n        {/* pause button */}\n      {isRunning && (\n        <button data-testid=\"pause\" onClick={handlePause}>\n          Pause\n        </button>\n      )}\n      {/* resume button */}\n      {!isRunning && time !== 0 && (\n        <button data-testid=\"resume\" onClick={handleResume}>\n          Resume\n        </button>\n      )}\n      { (\n        <button data-testid=\"reset\" onClick={handleReset} disabled={disable}>\n            Reset\n        </button>\n      )}\n\n        </div>\n    </div>\n  );\n};\n\nexport default Stopwatch;","import Stopwatch from './components/Stopwatch/Stopwatch';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className =\"container\">\n    <div className=\"App\">\n      <Stopwatch />\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}